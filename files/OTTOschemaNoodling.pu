/';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Sketches for the OTTO schema JEB
;;
;; Time-stamp: "2016-01-04 15:57:00 bushj"
;;
;; Get the plantuml jar at http://plantuml.com/download.html. Note the
;; dependency on Graphviz http://plantuml.com/faq.html
;;
;; java -jar plantuml.jar Code/bushj-miscellaneous/PUMLfiles/OTTOschemaNoodling.pu
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
'/

@startuml
/' 
   SAML, from Section 3 of
   https://www.oasis-open.org/committees/download.php/51890/SAML%20MD%20simplified%20overview.pdf, 
   with additions from the OTTO discussion on Sept 30th
'/

!define PLANTUML_HOME /Users/bushj/Google Drive/SyncTools/PUML
!include PLANTUML_HOME/OCLCskin.iuml

Title SAML MD Simplified Overview 

EntitiesDescriptor -- "*" EntitiesDescriptor
EntitiesDescriptor -- "0..*" EntityDescriptor

EntityDescriptor   -- RoleDescriptor
class EntityDescriptor{
      entityID()
      validUntil()
}     
RoleDescriptor <|-- AttrAuthorityDescriptor
RoleDescriptor <|-- SSODescriptorType
RoleDescriptor -- "0..1" KeyDescriptor
SSODescriptorType <|-- SPSSODescriptor
SPSSODescriptor -- "0..*" SingleLogoutService
SPSSODescriptor -- "0..*" AttributeConsumingService
SPSSODescriptor -- "0..*" AssertionConsumerService
SSODescriptorType <|-- IDPSSODescriptor
IDPSSODescriptor -- "0..*" ArtifactResolutionService
IDPSSODescriptor -- "0..*" SingleSignOnService
EntityDescriptor -- "0..1" AffiliationDescriptor : has affiliation >
AffiliationDescriptor -- "0..1" EntityDescriptor : contains entities >
AffiliationDescriptor -- KeyDescriptor
EntityDescriptor -- "0..1" Organization
Organization -- "0..1" ContactType


@enduml

20151209 Recommendation from Manus to use Schema.org (I realize i
misunderstood the nature of Schema.org. Knowing OCLC aligns to
schema.org i see no reason to avoid it.)

The way Schema.org extended organization to
https://schema.org/SportsOrganization was to have
https://schema.org/SportsTeam be members of SportsOrganization, where
SportsTeam extended SportsOrganization. Here is an example:

	   <script type="application/ld+json">
	   {
	     "@context": "http://schema.org",
       	     "@type": "SportsTeam",
	     "name": "Seattle Seahawks",
	     "sport": "American Football",
	     "memberOf": [
	     		 {		     
			   "@type": "SportsOrganization",
	          	   "name": "National Football League"
			 },{
      			   "@type": "SportsOrganization",
      			   "name": "National Football Conference"
    			 },{
      			   "@type": "SportsOrganization",
      			   "name": "NFC West Division"
    			 }
  			 ],

  	      "coach": {
    	                 "@type": "Person",
    			 "name": "Pete Carroll"
  		       },
  	      "athlete": [
    		         {
      		           "@type": "Person",
      		           "name": "Russell Wilson"
    			  },{
      			    "@type": "Person",
      			    "name": "Marshawn Lynch"
  			  }
  			  ]
	  }
	  </script>


@startuml
!define PLANTUML_HOME /Users/bushj/Google Drive/SyncTools/PUML
!include PLANTUML_HOME/OCLCskin.iuml
!define SO org.schema
!define O org.otto
!define X com.example
Title Using schema.org as a foundation 

/' https://schema.org/Thing'/
class SO.Thing{
name:Text
URL:URL
sameAs:URL
additionalType:URL
description:Text
potentialAction:Action
}
note as N_Thing
<b>Schema.org definitions</b>
additionalType: use to extend
from schema.org to add otto structure.

sameAs: use to point to the
cannonical web definition of
the Thing.
end note
N_Thing .. SO.Thing

/' https://schema.org/Intangible'/
SO.Intangible --|> SO.Thing
class SO.Intangible {
      utility class
      umbrella for
      intangible things
}


/' https://schema.org/Organization '/
SO.Organization --|> SO.Thing
class SO.Organization{
address:PostalAddress 
logo:URL
contactPoint:ContactPoint [0..*]
member:Organization [0..*]
memberOf:Organization
parentOrganization:Organization
subOrganization:Organization
}

note as N_Org
     <b>Schema.org definitions</b>
     Member: A member of an Organization or
     a ProgramMembership. Organizations can
     be members of organizations;
     ProgramMembership is typically for
     individuals.
end note
N_Org .. SO.Organization


SO.ContactPoint --|> SO.Thing
class SO.ContactPoint{
      contactType:Text
      email:Text
      faxNumber:Text
      hoursAvailable: OpeningHoursSpecification
      telephone: Text
      sameAs:URL
}

note as N_JSON_LD
     <b>definitions from http://www.w3.org/TR/json-ld</b>

     @id an IRIs (see RFC3987) which SHOULD return a
     Linked Data document describing the resource denoted
     by that IRI when being dereferenced.

end note

@enduml

@startuml
/';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BEGIN OTTO WORK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
'/
!define PLANTUML_HOME /Users/bushj/Google Drive/SyncTools/PUML
!include PLANTUML_HOME/OCLCskin.iuml
!define SO org.schema
!define O org.otto
!define X com.example


O.Federation - "[0..*]" O.FederationMember: > federationMembers
/' O.FederationMember - "[1..*]" O.Federation: > federatesWith '/
O.FederationMember - "[0..*]" O.FederatedService: > federatedServices
/' O.FederatedService - "1" O.FederationMember: > offeredBy '/

Class O.Federation <<SO.Organization>>{
      ..From Thing..
      name:Text
      URL:URL
      sameAs:URL
      additionalType:URL
      description:Text
      potentialAction:Action
      ..From Organization..
      address:PostalAddress 
      logo:URL
      contactPoint:ContactPoint [0..*]
      member:Organization [0..*]
      memberOf:Organization
      parentOrganization:Organization
      subOrganization:Organization
      ..
      federationMembers:FederationMember[0..*]
}

Class O.FederationMember <<SO.Organization>>{
      ..From Thing..
      name:Text
      URL:URL
      sameAs:URL
      additionalType:URL
      description:Text
      potentialAction:Action
      ..From Organization..
      address:PostalAddress 
      logo:URL
      contactPoint:ContactPoint [0..*]
      member:Organization [0..*]
      memberOf:Organization [0..1]
      parentOrganization:Organization[0..1]
      subOrganization:Organization[0..1]
      ..
      federatedServices:FederationService[0..*]
      federatedWith: Federation [1..*]
}

Note left
      2015-12-16 call: want the organization
      to be the member of the federation,
      not the entity/service.
end note



Class O.FederatedService <<SO.Intangible>>{
      ..From Thing..
      name:Text
      URL:URL
      sameAs:URL
      additionalType:URL
      description:Text
      potentialAction:Action
      ....
      offeredBy:FederationMember
      logo:URL[0..1]
      contactPoint:ContactPoint [0..*]
}
Note top of  O.FederatedService
     The additionalType here
     is used to classify the
     role the service provides
     in the federation, allowing
     extensiblity.
end note

O.OpenIDConnectProvider --|> O.FederatedService
Class O.OpenIDConnectProvider {
see separate diagram
} 


note as N_JSONarray
     Many of the metadata elements that are specified as a JSON array are here
     represented as single repeated elements. This will allow the OTTO
     standard to list the defined OpenID Connect scopes while also allowing
     a Federation to define new scopes. These federation specific scopes
     would be represented as a URL that links to the federation\'s defintion
     of the scope.
end note


Class X.SPSSSOAttributeConsuming{
      EntityID	
      ValidUntil
}


Class X.Text <<SO.Text>> {
      Assume this
      is needed 
      for SAML.
}

 @enduml

@startuml
!define PLANTUML_HOME /Users/bushj/Google Drive/SyncTools/PUML
!include PLANTUML_HOME/OCLCskin.iuml
!define SO org.schema
!define O org.otto
!define X com.example


/' https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata '/
Class O.OpenIDConnectProvider <<O.FederatedService>> {
      ..required per [OpenID.Discovery]..
      issuer: SO.URL
      /' REQUIRED. URL using the https scheme with no query or fragment
      component that the OP asserts as its Issuer Identifier. If Issuer
      discovery is supported this value MUST be identical to the issuer value
      returned by WebFinger. This also MUST be identical to the iss Claim value
      in ID Tokens issued from this Issuer.'/
      authorization_endpoint: SO.URL
      /'REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint
      [OpenID.Core]. token_endpoint URL of the OP\'s OAuth 2.0 Token Endpoint
      [OpenID.Core]. This is REQUIRED unless only the Implicit Flow is used.'/
      jwks_uri:SO.URL
      /'REQUIRED. URL of the OP's JSON Web Key Set [JWK] document. This contains
      the signing key(s) the RP uses to validate signatures from the OP. The JWK
      Set MAY also contain the Server's encryption key(s), which are used by RPs
      to encrypt requests to the Server. When both signing and encryption keys
      are made available, a use (Key Use) parameter value is REQUIRED for all
      keys in the referenced JWK Set to indicate each key's intended usage.
      Although some algorithms allow the same key to be used for both signatures
      and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK
      x5c parameter MAY be used to provide X.509 representations of keys
      provided. When used, the bare key values MUST still be present and MUST
      match those in the certificate.'/
      response_type_supported: SO.Text or SO.URL NOT JSON array  [1..*]
        Text limited to "code" "id_token" "token id_token" (more?)
      /'REQUIRED. JSON array containing a list of the OAuth 2.0 response_type
      values that this OP supports. Dynamic OpenID Providers MUST support the
      code, id_token, and the token id_token Response Type values.'/
      subject_type_supported: SO.Text or SO.URL NOT JSON array [1..*]
        Text includes "pairwise" "public" (more?)
      /'REQUIRED. JSON array containing a list of the Subject Identifier types
      that this OP supports. Valid types include pairwise and public.'/
      id_token_signing_alg_value_supported: SO.Text or SO.URL NOT JSON array [1..*]
        Text includes "RS256" "none" (more?)
      /'REQUIRED. JSON array containing a list of the JWS signing algorithms
      (alg values) supported by the OP for the ID Token to encode the Claims in
      a JWT [JWT]. The algorithm RS256 MUST be included. The value none MAY be
      supported, but MUST NOT be used unless the Response Type used returns no
      ID Token from the Authorization Endpoint (such as when using the
      Authorization Code Flow).'/

      ..recomended per [OpenID.Discovery]..
      userinfo_endpoint:SO.URL [0..1]
      /'RECOMMENDED. URL of the OP's UserInfo Endpoint [OpenID.Core]. This URL
      MUST use the https scheme and MAY contain port, path, and query parameter
      components.'/
      registration_endpoint:SO.URL [0..1]
      /'RECOMMENDED. URL of the OP's Dynamic Client Registration Endpoint
      [OpenID.Registration].'/
      scope_supported: SO.Text or SO.URL NOT JSON array [0..*]
        Text limited to those defined in [OpenID.Core]
      /'RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749]
      scope values that this server supports.
      https://tools.ietf.org/html/rfc6749#section-3.3	
      The server MUST support the openid scope value. Servers MAY choose not to
      advertise some supported scope values even when this parameter is used,
      although those defined in [OpenID.Core] SHOULD be listed, if supported.'/
      
      ..optional per [OpenID.Discovery]..
      response_mode_supported: SO.Text or SO.URL NOT JSON array [0..*]
        Text limited to "query" "fragment" (more?)
      /'OPTIONAL. JSON array containing a list of the OAuth 2.0 response_mode
      values that this OP supports, as specified in OAuth 2.0 Multiple Response
      Type Encoding Practices [OAuth.Responses]. If omitted, the default for
      Dynamic OpenID Providers is ["query", "fragment"].'/
      grant_type_supported: SO.Text or SO.URL NOT JSON array [0..*]
        Text limited to "authorization_code" "implicit" (more?)
      /'OPTIONAL. JSON array containing a list of the OAuth 2.0 Grant Type
      values that this OP supports. Dynamic OpenID Providers MUST support the
      authorization_code and implicit Grant Type values and MAY support other
      Grant Types. If omitted, the default value is ["authorization_code",
      "implicit"].'/
      acr_value_supported: SO.Text or SO.URL NOT JSON array [0..*]
        Text limited to (?)
      /'OPTIONAL. JSON array containing a list of the Authentication Context
      Class References that this OP supports.'/
      id_token_encryption_alg_value_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to (?)
      /'OPTIONAL. JSON array containing a list of the JWE encryption algorithms
      (alg values) supported by the OP for the ID Token to encode the Claims in
      a JWT [JWT].'/
      id_token_encryption_enc_value_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to (?)
      /'OPTIONAL. JSON array containing a list of the JWE encryption algorithms
      (enc values) supported by the OP for the ID Token to encode the Claims in
      a JWT [JWT].'/
      userinfo_signing_alg_value_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to "none" (more?)
      /'OPTIONAL. JSON array containing a list of the JWS [JWS] signing
      algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode
      the Claims in a JWT [JWT]. The value none MAY be included.'/
      userinfo_encryption_alg_value_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to (?)
      /'OPTIONAL. JSON array containing a list of the JWE [JWE] encryption
      algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode
      the Claims in a JWT [JWT].'/
      userinfo_encryption_enc_value_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to (?)
      /'OPTIONAL. JSON array containing a list of the JWE encryption algorithms
      (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims
      in a JWT [JWT].'/
      request_object_signing_alg_value_supported SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to  "none" "RS256" (more?)
      /'OPTIONAL. JSON array containing a list of the JWS signing algorithms
      (alg values) supported by the OP for Request Objects, which are described
      in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms
      are used both when the Request Object is passed by value (using the
      request parameter) and when it is passed by reference (using the
      request_uri parameter). Servers SHOULD support none and RS256.'/
      request_object_encryption_alg_value_supported SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to (?)
      /'OPTIONAL. JSON array containing a list of the JWE encryption algorithms
      (alg values) supported by the OP for Request Objects. These algorithms are
      used both when the Request Object is passed by value and when it is passed
      by reference.'/
      request_object_encryption_enc_value_supported SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to (?)
      /'OPTIONAL. JSON array containing a list of the JWE encryption algorithms
      (enc values) supported by the OP for Request Objects. These algorithms are
      used both when the Request Object is passed by value and when it is passed
      by reference.'/
      token_endpoint_auth_method_supported  SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to client_secret_post, client_secret_basic,
      	client_secret_jwt, and private_key_jwt, and extensions
      /'OPTIONAL. JSON array containing a list of Client
      Authentication methods supported by this Token Endpoint. The
      options are client_secret_post, client_secret_basic,
      client_secret_jwt, and private_key_jwt, as described in Section
      9 of OpenID Connect Core 1.0 [OpenID.Core]. Other authentication
      methods MAY be defined by extensions. If omitted, the default is
      client_secret_basic -- the HTTP Basic Authentication Scheme
      specified in Section 2.3.1 of OAuth 2.0 [RFC6749].'/

/' FIXME change back to plurals above!!! '/

      token_endpoint_auth_signing_alg_values_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to
      /' OPTIONAL. JSON array containing a list of the JWS signing
      algorithms (alg values) supported by the Token Endpoint for the
      signature on the JWT [JWT] used to authenticate the Client at
      the Token Endpoint for the private_key_jwt and client_secret_jwt
      authentication methods. Servers SHOULD support RS256. The value
      none MUST NOT be used.'/

      display_values_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to
      /'OPTIONAL. JSON array containing a list of the display
      parameter values that the OpenID Provider supports. These values
      are described in Section 3.1.2.1 of OpenID Connect Core 1.0
      [OpenID.Core].'/

      claim_types_supported:: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to
      /'OPTIONAL. JSON array containing a list of the Claim Types that
      the OpenID Provider supports. These Claim Types are described in
      Section 5.6 of OpenID Connect Core 1.0 [OpenID.Core]. Values
      defined by this specification are normal, aggregated, and
      distributed. If omitted, the implementation supports only normal
      Claims.'/

      claims_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to
      /'RECOMMENDED. JSON array containing a list of the Claim Names
      of the Claims that the OpenID Provider MAY be able to supply
      values for. Note that for privacy or other reasons, this might
      not be an exhaustive list.'/
      
      service_documentation
      /' OPTIONAL. URL of a page containing human-readable information
      that developers might want or need to know when using the OpenID
      Provider. In particular, if the OpenID Provider does not support
      Dynamic Client Registration, then information on how to register
      Clients needs to be provided in this documentation.'/
     
      claims_locales_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to
      /'OPTIONAL. Languages and scripts supported for values in Claims
      being returned, represented as a JSON array of BCP47 [RFC5646]
      language tag values. Not all languages and scripts are
      necessarily supported for all Claim values.'/


      ui_locales_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to BCP47 [RFC5646] language tag values
      /'OPTIONAL. Languages and scripts supported for the user
      interface.'/
      
      claims_parameter_supported: SO.Text or SO.URL [0..*]
        NOT JSON array
	Text limited to
      /'OPTIONAL. Boolean value specifying whether the OP supports use
      of the claims parameter, with true indicating support. If
      omitted, the default value is false.'/
      
      request_parameter_supported
      '/OPTIONAL. Boolean value specifying whether the OP supports use
      of the request parameter, with true indicating support. If
      omitted, the default value is false.'/

      request_uri_parameter_supported
      '/OPTIONAL. Boolean value specifying whether the OP supports use
      of the request_uri parameter, with true indicating support. If
      omitted, the default value is true.'/
      
      require_request_uri_registration
      '/OPTIONAL. Boolean value specifying whether the OP requires any
      request_uri values used to be pre-registered using the
      request_uris registration parameter. Pre-registration is
      REQUIRED when the value is true. If omitted, the default value
      is false.'/

      op_policy_uri
      /'OPTIONAL. URL that the OpenID Provider provides to the person
      registering the Client to read about the OP's requirements on
      how the Relying Party can use the data provided by the OP. The
      registration process SHOULD display this URL to the person
      registering the Client if it is given.'/
      
      op_tos_uri
      /'OPTIONAL. URL that the OpenID Provider provides to the person
      registering the Client to read about OpenID Provider's terms of
      service. The registration process SHOULD display this URL to the
      person registering the Client if it is given.'/

}
@enduml

